#!/usr/bin/env python
"""Calculates the cost of buying more farms in The Grid, and more.
(http://codeelf.com/games/the-grid-2/grid/)"""
import click
import random


@click.group()
def main():
    pass


@main.command()
@click.argument("farms", type=int)
@click.option("-c", "--cost", help="the cost of buying a farm", default=100)
@click.option("-t", "--til", help="the # of farms to output up to", default=20)
def cost(farms, cost, til):
    price = 0
    for i in range(til):
        price += (farms + i + 1) * cost
        print(i + 1, price)


@main.command()
@click.argument("wizards", type=int)
@click.option("-c", "--cost", type=int, default=100)
def wiz(wizards, cost):
    def income(f, w):
        # roughly proportional to actual grid income
        return (1 + .7 * w) * f
    def farm_cost(f):
        # returns cost of buying the f+1th farm
        return cost * (f + 1)
    def wizard_cost(w):
        # returns cost of buying the w+1th wizard
        return 5_000_000 * 2 ** w
    farms = 0
    while True:
        cur_income = income(farms, wizards)
        farm_benefit = income(farms + 1, wizards) - cur_income
        wiz_benefit = income(farms, wizards + 1) - cur_income
        if farm_benefit / farm_cost(farms) > wiz_benefit / wizard_cost(wizards):
            farms += 1
        else:
            break
    print(farms)


@main.command()
@click.argument("farms", type=int)
@click.argument("gold", type=int)
@click.option("-c", "--cost", default=100, help="base cost of buying a farm")
def til(farms, gold, cost):
    price = 0
    num = 0
    while gold > price:
        num += 1
        price += cost * (farms + num)
    num -= 1
    print(num)


@main.command()
@click.argument("starting_amount", type=int)
@click.argument("goal", type=int)
@click.argument("gamble_amount", default=1)
@click.option("-m", "--monte_carlo", is_flag=True)
@click.option("-e", "--energy", is_flag=True)
@click.option("-c", "--chance", default=81/160)
def gamble(starting_amount, goal, gamble_amount, monte_carlo, energy, chance):
    p_win = chance
    assert goal > starting_amount
    if monte_carlo:
        p_win = 81/160
        trials = 100000
        wins = 0
        for _ in range(trials):
            money = starting_amount
            while 0 < money < goal:
                bet = min(money - 1, gamble_amount)
                if random.random() < p_win:
                    money += bet
                else:
                    money -= bet + (1 if energy else 0)
            if money >= goal:
                wins += 1
        print(wins / trials)
    else:
        # simple gambler's ruin model to see our chance of gambling up to a certain goal
        p_win = ((162 * gamble_amount - 79) / 320 / gamble_amount
                 if energy else chance)
        p_loss = 1 - p_win
        starting_amount = starting_amount // gamble_amount
        goal = goal // gamble_amount
        if p_win == 0.5:
            p_ruin = starting_amount / goal
        else:
            p_ruin = (1 - (p_win / p_loss) ** (goal - starting_amount)) / (1 - (p_win / p_loss) ** goal)
        if p_win == 0.5:
            expected_time = starting_amount * (goal - starting_amount)
        else:
            expected_time = starting_amount / (1 - 2 * p_win) - goal / (1 - 2 * p_win) * (((1 - p_win) / p_win) ** goal - 1) / (((1 - p_win) / p_win) ** goal - 1)
        print("P(success): {}".format(1 - p_ruin))
        print("ETA: {}".format(expected_time))


if __name__ == '__main__':
    main()
