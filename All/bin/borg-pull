#!/usr/bin/env python
# USAGE:
#     borg-pull remote-host create ssh://tunnel/path/to/local/borg/repo path
# "Pulling" borg backups from remote servers to local repositories can be done
# with SSHFS or reverse SSH, but SSHFS is slow, and I'm behind a NAT (and don't
# want to manage keys/ssh config). So, this script makes borg communicate with
# a local borg server using tunneled unix domain sockets.
import subprocess
import tempfile
import shutil
import sys


def main():
    if len(sys.argv) < 2:
        print(f"USAGE: {sys.argv[0]} <host> ARGS...", file=sys.stderr)
        return
    host = sys.argv[1]

    # Create local socket and run borg server listening on it.
    tempdir = tempfile.mkdtemp(prefix="/tmp/borgpull.")
    local_sock = f"{tempdir}/borg.sock"
    borg_serve_cmd = "borg serve --append-only --restrict-to-path=."
    server_cmd = [
        "socat",
        f"UNIX-LISTEN:{local_sock}",
        f"SYSTEM:{borg_serve_cmd}",
    ]
    server = subprocess.Popen(server_cmd)

    # Create remote directory for socket and script borg can use to talk to it.
    remote_tempdir = subprocess.run(
        ["ssh", host, "mktemp", "-d", "/tmp/borgpull.XXX"],
        capture_output=True,
        text=True,
        check=True,
    ).stdout.strip()
    remote_sock = f"{remote_tempdir}/borg.sock"
    remote_socat_cmd = f'bash -c "socat - UNIX-CONNECT:{remote_sock}"'

    # Use ssh to connect the local socket and a remote socket and run borg.
    remote_cmd = [f"BORG_RSH='{remote_socat_cmd}'", "borg", *sys.argv[2:]]
    ssh_cmd = ["ssh", host, "-R", f"{remote_sock}:{local_sock}"] + remote_cmd
    result = subprocess.run(
        ssh_cmd,
        text=True,
        stdout=sys.stdout,
        stderr=sys.stderr,
        stdin=sys.stdin,
    )

    # Cleanup.
    server.kill()
    shutil.rmtree(tempdir)
    subprocess.run(["ssh", host, "rm", "-rf", remote_tempdir])
    sys.exit(result.returncode)


if __name__ == "__main__":
    main()
